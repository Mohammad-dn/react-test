/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * WebAPIForExam
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  GetWebapiRequestGetVehicleUsersParams,
  WebAPIRequestSendRequestRequest
} from '../../model'



export const getWebapiRequestGetVehicleUsers = (
    params: GetWebapiRequestGetVehicleUsersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.get(
      `https://exam.pishgamanasia.com/webapi/Request/GetVehicleUsers`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetWebapiRequestGetVehicleUsersQueryKey = (params: GetWebapiRequestGetVehicleUsersParams,) => {
    return [`https://exam.pishgamanasia.com/webapi/Request/GetVehicleUsers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetWebapiRequestGetVehicleUsersQueryOptions = <TData = Awaited<ReturnType<typeof getWebapiRequestGetVehicleUsers>>, TError = AxiosError<unknown>>(params: GetWebapiRequestGetVehicleUsersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWebapiRequestGetVehicleUsers>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWebapiRequestGetVehicleUsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWebapiRequestGetVehicleUsers>>> = ({ signal }) => getWebapiRequestGetVehicleUsers(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWebapiRequestGetVehicleUsers>>, TError, TData> & { queryKey: QueryKey }
}

export type GetWebapiRequestGetVehicleUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getWebapiRequestGetVehicleUsers>>>
export type GetWebapiRequestGetVehicleUsersQueryError = AxiosError<unknown>



export function useGetWebapiRequestGetVehicleUsers<TData = Awaited<ReturnType<typeof getWebapiRequestGetVehicleUsers>>, TError = AxiosError<unknown>>(
 params: GetWebapiRequestGetVehicleUsersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWebapiRequestGetVehicleUsers>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetWebapiRequestGetVehicleUsersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postWebapiRequestSendRequest = (
    webAPIRequestSendRequestRequest: WebAPIRequestSendRequestRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `https://exam.pishgamanasia.com/webapi/Request/SendRequest`,
      webAPIRequestSendRequestRequest,options
    );
  }



export const getPostWebapiRequestSendRequestMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWebapiRequestSendRequest>>, TError,{data: WebAPIRequestSendRequestRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postWebapiRequestSendRequest>>, TError,{data: WebAPIRequestSendRequestRequest}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postWebapiRequestSendRequest>>, {data: WebAPIRequestSendRequestRequest}> = (props) => {
          const {data} = props ?? {};

          return  postWebapiRequestSendRequest(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostWebapiRequestSendRequestMutationResult = NonNullable<Awaited<ReturnType<typeof postWebapiRequestSendRequest>>>
    export type PostWebapiRequestSendRequestMutationBody = WebAPIRequestSendRequestRequest
    export type PostWebapiRequestSendRequestMutationError = AxiosError<unknown>

    export const usePostWebapiRequestSendRequest = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWebapiRequestSendRequest>>, TError,{data: WebAPIRequestSendRequestRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postWebapiRequestSendRequest>>,
        TError,
        {data: WebAPIRequestSendRequestRequest},
        TContext
      > => {

      const mutationOptions = getPostWebapiRequestSendRequestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    